<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>博客更换主题</title>
      <link href="/posts/cd823f99/"/>
      <url>/posts/cd823f99/</url>
      
        <content type="html"><![CDATA[<h2 id="主题更换——2022年5月24日"><a href="#主题更换——2022年5月24日" class="headerlink" title="主题更换——2022年5月24日"></a>主题更换——2022年5月24日</h2><p>经过这几天的整理，终于决定还是换回<a href="https://github.com/jerryc127/hexo-theme-butterfly">hexo-theme-butterfly</a>🤣</p><p>博客可能会有部分没有完善，慢慢来吧</p><blockquote><p>最终美花的尽头是简洁，虽然NexT也很简洁，但是还是不符合我的审美，昨天偶然看到的了别的大佬配置的butterfly主题，就搬过来自己又改了改，去掉了所有封面，专注文章内容~</p></blockquote><p>增加相册😘，里面都是我自己开发的接口里面拿的图片（大概1k+😍）有需自取</p><h2 id="涩图API💖"><a href="#涩图API💖" class="headerlink" title="涩图API💖"></a>涩图API💖</h2><ul><li><a href="https://fs233.cc/">fs233 API</a>😍</li></ul>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
          <category> 杂谈 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂谈 </tag>
            
            <tag> Hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库安装包安装（一键安装包安装）</title>
      <link href="/posts/35a/"/>
      <url>/posts/35a/</url>
      
        <content type="html"><![CDATA[<h1 id="MySQL数据库安装包安装（一键安装包安装）"><a href="#MySQL数据库安装包安装（一键安装包安装）" class="headerlink" title="MySQL数据库安装包安装（一键安装包安装）"></a>MySQL数据库安装包安装（一键安装包安装）</h1><h2 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h2><p><a href="https://downloads.mysql.com/archives/installer/">MySQL安装包下载📄</a></p><p><img src="https://cos.blog.fsyume.com/blog-pic/202205261342448.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>双击打开安装包<br>只需要仅安装MySQL服务即可<br><img src="https://cos.blog.fsyume.com/blog-pic/202205261342862.png"><br>然后下一步即可<br>这里选第一个即可<br><img src="https://cos.blog.fsyume.com/blog-pic/202205261343990.png"><br>这里设置你的root密码<br><img src="https://cos.blog.fsyume.com/blog-pic/202205261343269.png"><br>之后都是默认配置一直下一步即可</p><p>这样你电脑的mysql就安装成功了</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据库管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据库可视化工具DBeaver</title>
      <link href="/posts/b5c/"/>
      <url>/posts/b5c/</url>
      
        <content type="html"><![CDATA[<h1 id="数据库可视化工具DBeaver"><a href="#数据库可视化工具DBeaver" class="headerlink" title="数据库可视化工具DBeaver"></a>数据库可视化工具DBeaver</h1><p><a href="https://github.com/dbeaver/dbeaver">Github项目地址</a><br>支持多种数据库</p><p><img src="https://cos.blog.fsyume.com/blog-pic/202205261350789.png"></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>在仓库的Releases处下载你对应的系统版本，默认配置安装即可</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> 数据库管理工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库可视化工具 </tag>
            
            <tag> DBeaver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PicGo搭建白嫖Github的图床</title>
      <link href="/posts/1860/"/>
      <url>/posts/1860/</url>
      
        <content type="html"><![CDATA[<h1 id="PicGo搭建白嫖Github的图床"><a href="#PicGo搭建白嫖Github的图床" class="headerlink" title="PicGo搭建白嫖Github的图床"></a>PicGo搭建白嫖Github的图床</h1><blockquote><p>会尽快与博客同步</p></blockquote><p><a href="https://www.bilibili.com/read/cv14878180">B站专栏👉</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PicGo搭建白嫖Github的图床 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VS Code插件推荐----Markdown插件代替Typora</title>
      <link href="/posts/c933/"/>
      <url>/posts/c933/</url>
      
        <content type="html"><![CDATA[<blockquote><p>Typora收费了，三台设备89元，但是还是可以用老版本，就是没有免费更新了</p></blockquote><h2 id="插件推荐"><a href="#插件推荐" class="headerlink" title="插件推荐"></a>插件推荐</h2><p><strong>插件名</strong>：Markdown Preview Enhanced </p><blockquote><p>支持切换皮肤，在浏览器中打开，支持导出PDF，JPG等格式的文件</p></blockquote><p><a href="https://marketplace.visualstudio.com/items?itemName=shd101wyy.markdown-preview-enhanced">👉VS Code插件地址</a></p><p><a href="https://shd101wyy.github.io/markdown-preview-enhanced/#/zh-cn/">👉官方文档地址-简中</a></p>]]></content>
      
      
      <categories>
          
          <category> 其他 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> VSCode </tag>
            
            <tag> VSCode插件 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux项目部署常用命令</title>
      <link href="/posts/658a/"/>
      <url>/posts/658a/</url>
      
        <content type="html"><![CDATA[<h2 id="Linux-查看端口占用情况"><a href="#Linux-查看端口占用情况" class="headerlink" title="Linux 查看端口占用情况"></a>Linux 查看端口占用情况</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsof -i:端口号</span><br></pre></td></tr></table></figure><h2 id="脱离终端的方式在后台运行shell命令"><a href="#脱离终端的方式在后台运行shell命令" class="headerlink" title="脱离终端的方式在后台运行shell命令"></a>脱离终端的方式在后台运行shell命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup 你的shell命令 &amp;</span><br></pre></td></tr></table></figure><h2 id="常用任务管理命令"><a href="#常用任务管理命令" class="headerlink" title="常用任务管理命令"></a>常用任务管理命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">jobs //查看任务，返回任务编号n和进程号</span><br><span class="line"></span><br><span class="line">bg %n //将编号为n的任务转后台运行</span><br><span class="line"></span><br><span class="line">fg %n //将编号为n的任务转前台运行</span><br><span class="line"></span><br><span class="line">ctrl+z //挂起当前任务</span><br><span class="line"></span><br><span class="line">ctrl+c //结束当前任务</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 项目部署 </tag>
            
            <tag> 部署命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之旅----选择排序</title>
      <link href="/posts/781f/"/>
      <url>/posts/781f/</url>
      
        <content type="html"><![CDATA[<h1 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h1><h2 id="内存的工作原理"><a href="#内存的工作原理" class="headerlink" title="内存的工作原理"></a>内存的工作原理</h2><span id="more"></span><p>把内存比喻成一个寄存处的一个柜子，柜子有很多抽屉，每个抽屉可放一样东西，你有两样东西要寄存，因此要了两个抽屉。</p><p>你将两样东西存放在这里，这就是大致的计算机内存的工作原理，计算机就像是很多抽屉的集合体，每个抽屉都有地址。</p><p>需要将数据存储到内存时，你请求计算机提供存储空间，计算机给你一个<strong>存储地址</strong>。</p><p>需要<strong>存多项数据</strong>时，有两种基本方式——<strong>数组和链表</strong>。</p><h2 id="数组和链表"><a href="#数组和链表" class="headerlink" title="数组和链表"></a>数组和链表</h2><p>有时候，需要在内存中储存一系列元素。</p><p>应该是使用数组还是链表呢？</p><p>数组的元素带编号，编号从0开始而不是从1开始。</p><p>对于访问，数组在物理内存上是连续存储的，硬件上支持“随机访问” </p><p>链表没有下标的概念，只能通过头节点指针，从每一个节点，依次往下找，因为下个节点的位置信息只能通过上个节点知晓</p><p>对于增加，因为数组在内存中是连续存储的，要想在某个节点之前增加，且保持增加后数组的线性与完整性，必须要把此节点往后的元素依次后移。</p><p>而链表却为其他元素着想多了。由上图可知，链表中只需要改变节点中的“指针”，就可以实现增加。自身在内存中所占据的位置不变，只是这个节点所占据的这块内存中数据（指针）改变了，相对于数组“牵一发而动全身”的大动作，链表则要显示温和的多，局部数据改写就可以了。</p><h2 id="选择排序-1"><a href="#选择排序-1" class="headerlink" title="选择排序"></a>选择排序</h2><blockquote><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p></blockquote><h3 id="算法步骤"><a href="#算法步骤" class="headerlink" title="算法步骤"></a>算法步骤</h3><p>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</p><p>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</p><p>重复第二步，直到所有元素均排序完毕。</p><h3 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SelectionSort</span> <span class="keyword">implements</span> <span class="title class_">IArraySort</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span>[] sort(<span class="type">int</span>[] sourceArray) <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">int</span>[] arr = Arrays.copyOf(sourceArray, sourceArray.length);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 总共要经过 N-1 轮比较</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; arr.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> i;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 每轮需要比较的次数 N-i</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">j</span> <span class="operator">=</span> i + <span class="number">1</span>; j &lt; arr.length; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span> (arr[j] &lt; arr[min]) &#123;</span><br><span class="line">                    <span class="comment">// 记录目前能找到的最小值元素的下标</span></span><br><span class="line">                    min = j;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 将找到的最小值和i位置所在的值进行交换</span></span><br><span class="line">            <span class="keyword">if</span> (i != min) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">tmp</span> <span class="operator">=</span> arr[i];</span><br><span class="line">                arr[i] = arr[min];</span><br><span class="line">                arr[min] = tmp;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> arr;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 选择排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>同时将代码同步到GitHub和Gitee</title>
      <link href="/posts/f5ef/"/>
      <url>/posts/f5ef/</url>
      
        <content type="html"><![CDATA[<h1 id="同时将代码同步到GitHub和Gitee"><a href="#同时将代码同步到GitHub和Gitee" class="headerlink" title="同时将代码同步到GitHub和Gitee"></a>同时将代码同步到GitHub和Gitee</h1><blockquote><p>最近想把项目同时在两个平台更新，就开始摸索怎么将代码同步到两个平台</p></blockquote><h3 id="首先配置本地的ssh密钥"><a href="#首先配置本地的ssh密钥" class="headerlink" title="首先配置本地的ssh密钥"></a>首先配置本地的ssh密钥</h3><span id="more"></span><ol><li>打开CMD</li><li>输入命令<code>ssh-keygen -t rsa</code>生成公钥和私钥</li></ol><h3 id="打开公钥和私钥的存放地点"><a href="#打开公钥和私钥的存放地点" class="headerlink" title="打开公钥和私钥的存放地点"></a>打开公钥和私钥的存放地点</h3><p>Windows系统默认在</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Users\&lt;用户名&gt;\.ssh</span><br></pre></td></tr></table></figure><p>其中id_rsa.pub是公钥</p><p>用记事本或者vscode打开后全部复制</p><h3 id="打开Gitee和Github的SSH公钥（在个人设置里面）"><a href="#打开Gitee和Github的SSH公钥（在个人设置里面）" class="headerlink" title="打开Gitee和Github的SSH公钥（在个人设置里面）"></a>打开Gitee和Github的SSH公钥（在个人设置里面）</h3><p>复制并保存</p><h3 id="乌龟git（TortoiseGit）相关设置"><a href="#乌龟git（TortoiseGit）相关设置" class="headerlink" title="乌龟git（TortoiseGit）相关设置"></a>乌龟git（TortoiseGit）相关设置</h3><p>如果你使用的是乌龟git可视化操作需要配置乌龟git的默认ssh</p><p><img src="https://cdn.jsdelivr.net/gh/kzycn/cdn/Github/TortoiseGit.png" alt="乌龟git"></p>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
            <tag> 代码同步 </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Github访问问题</title>
      <link href="/posts/79cb/"/>
      <url>/posts/79cb/</url>
      
        <content type="html"><![CDATA[<h1 id="Github访问问题"><a href="#Github访问问题" class="headerlink" title="Github访问问题"></a>Github访问问题</h1><blockquote><p>最近GitHub一直抽风，在学校大部分时间根本访问不了，查找问题原因，怀疑是DNS污染</p></blockquote><p>在Gitee找到个项目可以解决</p><span id="more"></span><p><a href="https://gitee.com/jyotish/githubhosts">项目地址</a></p><p>里面保存有GitHub真实的地址，修改系统host文件即可</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">199.232.69.194 github.global.ssl.fastly.net</span><br><span class="line">140.82.112.4 www.github.com</span><br><span class="line">185.199.108.153 assets-cdn.github.com</span><br><span class="line">185.199.109.153 assets-cdn.github.com</span><br><span class="line">185.199.110.153 assets-cdn.github.com</span><br><span class="line">185.199.111.153 assets-cdn.github.com</span><br><span class="line">185.199.108.153 documentcloud.github.com</span><br><span class="line">185.199.109.153 documentcloud.github.com</span><br><span class="line">185.199.110.153 documentcloud.github.com</span><br><span class="line">185.199.111.153 documentcloud.github.com</span><br><span class="line">140.82.114.3 gist.github.com</span><br><span class="line">185.199.108.153 help.github.com</span><br><span class="line">185.199.109.153 help.github.com</span><br><span class="line">185.199.110.153 help.github.com</span><br><span class="line">185.199.111.153 help.github.com</span><br><span class="line">140.82.112.9 nodeload.github.com</span><br><span class="line">199.232.68.133 raw.github.com</span><br><span class="line">140.82.112.18 status.github.com</span><br><span class="line">140.82.113.18 training.github.com</span><br><span class="line">199.232.68.133 raw.githubusercontent.com</span><br><span class="line">199.232.68.133 user-images.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars1.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars2.githubusercontent.com</span><br><span class="line">199.232.68.133 avatars3.githubusercontent.com</span><br><span class="line">199.232.68.133 cloud.githubusercontent.com</span><br><span class="line">140.82.113.6 api.github.com</span><br></pre></td></tr></table></figure><h4 id="改完如何刷新生效"><a href="#改完如何刷新生效" class="headerlink" title="改完如何刷新生效"></a>改完如何刷新生效</h4><p><strong>Windows</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /flushdns</span><br></pre></td></tr></table></figure><p><strong>Ubuntu</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl restart nscd</span><br></pre></td></tr></table></figure><p><strong>Mac</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo killall -HUP mDNSResponder</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> GitHub </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitHub </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JWT原理</title>
      <link href="/posts/d713/"/>
      <url>/posts/d713/</url>
      
        <content type="html"><![CDATA[<h1 id="JWT"><a href="#JWT" class="headerlink" title="JWT"></a>JWT</h1><h2 id="JWT原理"><a href="#JWT原理" class="headerlink" title="JWT原理"></a>JWT原理</h2><p>服务器认证以后会生产一个json对象，服务器完全只靠这个json对象校验用户身份，<br>为了防止json串被篡改，服务器在生成这个json对象时会进行签名</p><p>也就是说服务器端不保存这个数据，每次客户端请求时需要带着这个json对象</p><h3 id="JWT数据结构"><a href="#JWT数据结构" class="headerlink" title="JWT数据结构"></a>JWT数据结构</h3><p>形如 xxxx.yyy.zzz 由三部分组成，每部分用英文句号连接</p><p>JWT的三个部分：<br><code>header 头部</code><br><code>payload 负载</code><br><code>signature 签名</code></p><p>也就是 <code>Header.Payload.Signature</code></p><h4 id="1、Header-头部"><a href="#1、Header-头部" class="headerlink" title="1、Header 头部"></a>1、Header 头部</h4><p>是一个JSON 对象, 描述JWT的元数据，形如：<br><code>&#123;&quot;alg&quot;: &quot;HS256&quot;, &quot;typ&quot;: &quot;JWT&quot;&#125;</code></p><p><code>alg</code>属性表示签名的算法（algorithm）,默认是 <code>HMAC SHA256</code></p><p><code>typ</code>属性表示这个令牌的类型（type）,JWT 令牌统一写为JWT</p><h4 id="2、payload-负载"><a href="#2、payload-负载" class="headerlink" title="2、payload 负载"></a>2、payload 负载</h4><p>是一个JSON 对象, 用来存放实际需要传递的数据，形如：<br><code>&#123;&quot;sub&quot;: &quot;1234567890&quot;, &quot;name&quot;: &quot;John Doe&quot;,&quot;admin&quot;: true&#125;</code></p><p>一般是在这个部分定义私有字段：<br>例如<code>&#123;&quot;userId&quot;:&quot;1&quot;,&quot;userName&quot;:&quot;jack&quot;&#125;</code></p><p>其中payload官方规定了7个字段：</p><p><code>iss (issuer)</code>：签发人</p><p><code>exp (expiration time)</code>：过期时间</p><p><code>sub (subject)</code>：主题</p><p><code>aud (audience)</code>：受众</p><p><code>nbf (Not Before)</code>：生效时间</p><p><code>iat (Issued At)</code>：签发时间</p><p><code>jti (JWT ID)</code>：编号</p><p>注意，JWT 默认是不加密的，任何人都可以读到，所以不要把机密信息放在这个部分。</p><h4 id="3、signature-签名"><a href="#3、signature-签名" class="headerlink" title="3、signature 签名"></a>3、signature 签名</h4><p>signature 是对前两部分的签名，防止数据篡改</p><p>1、需要指定一个密钥（secret）<br>2、这个密钥只有服务器才知道，不能泄露给客户端<br>3、使用 Header 里面指定的签名算法，按照下面的公式产生签名。</p><pre><code>`HMACSHA256(   base64UrlEncode(header) + &quot;.&quot; +   base64UrlEncode(payload),   secret )`</code></pre><p>也就是signature等于上面公式算出来的</p><p>把 <code>Header</code>、<code>Payload</code>、<code>Signature</code> 三个部分拼成一个字符串: <code>xxxx.yyy.zzz</code></p><p>其中<code>base64UrlEncode</code>是串型化算法，处理特殊字符，&#x3D;被省略、+替换成-，&#x2F;替换成_</p><h3 id="JWT-使用方式"><a href="#JWT-使用方式" class="headerlink" title="JWT 使用方式"></a>JWT 使用方式</h3><p>客户端收到服务器返回的 JWT，可以储存在 <code>Cookie</code> 里面，也可以储存在 <code>localStorage</code><br>以后客户端每次与服务器通信，都要带上这个 JWT</p><ul><li><p>方式1、可以放在 Cookie 里面自动发送，但是这样不能跨域</p></li><li><p>方式2、更好的做法是放在 HTTP 请求的头信息<code>Authorization</code>字段里面</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Authorization: Bearer &lt;token&gt;</span><br></pre></td></tr></table></figure></li><li><p>方式3、JWT放在POST请求的数据体body里面</p></li></ul><h3 id="JWT-的几个特点"><a href="#JWT-的几个特点" class="headerlink" title="JWT 的几个特点"></a>JWT 的几个特点</h3><ol><li>JWT 默认是不加密，但也是可以加密的。生成原始 Token 以后，可以用密钥再加密一次。</li><li>WT 不加密的情况下，不能将秘密数据写入 JWT。</li><li>JWT 不仅可以用于认证，也可以用于交换信息。有效使用 JWT，可以降低服务器查询数据库的次数。</li><li>JWT 的最大缺点是，由于服务器不保存 session 状态，因此无法在使用过程中废止某个 token，或者更改 token 的权限。也就是说，<strong>一旦 JWT 签发了，在到期之前就会始终有效，除非服务器部署额外的逻辑。</strong></li><li>JWT 本身包含了认证信息，一旦泄露，任何人都可以获得该令牌的所有权限。为了减少盗用，JWT 的有效期应该设置得比较短。对于一些比较重要的权限，使用时应该再次对用户进行认证。</li><li>为了减少盗用，JWT 不应该使用 HTTP 协议明码传输，要使用 HTTPS 协议传输。</li></ol><h2 id="JWT-API"><a href="#JWT-API" class="headerlink" title="JWT API"></a>JWT API</h2><h3 id="安装Maven"><a href="#安装Maven" class="headerlink" title="安装Maven"></a>安装Maven</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.auth0<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>java-jwt<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.7.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="生成token"><a href="#生成token" class="headerlink" title="生成token"></a>生成token</h3><h4 id="首先设置签名"><a href="#首先设置签名" class="headerlink" title="首先设置签名"></a>首先设置签名</h4><blockquote><p>这个签名一定要复杂</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//签名</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">String</span> <span class="variable">SING</span> <span class="operator">=</span> <span class="string">&quot;复杂的签名&quot;</span>;</span><br></pre></td></tr></table></figure><h4 id="生成JWT的方法"><a href="#生成JWT的方法" class="headerlink" title="生成JWT的方法"></a>生成JWT的方法</h4><ol><li>使用<code>Jwts.builder()</code>方法创建<code>JwtBuilder</code>实例</li><li>调用<code>JwtBuilder</code>方法以根据需要添加标头参数和声明。</li><li>指定要用于签署JWT的<code>SecretKey</code>或非对称<code>PrivateKey</code></li><li>最后，调用<code>compact()</code>方法进行压缩和签名，生成最终的jws</li></ol><p><strong>例子：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">jws</span> <span class="operator">=</span> Jwts.builder() <span class="comment">// (1)</span></span><br><span class="line"></span><br><span class="line">    .setSubject(<span class="string">&quot;Bob&quot;</span>)      <span class="comment">// (2) </span></span><br><span class="line"></span><br><span class="line">    .signWith(key)          <span class="comment">// (3)</span></span><br><span class="line">     </span><br><span class="line">    .compact();             <span class="comment">// (4)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JWT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Springboot实现邮件发送</title>
      <link href="/posts/767f/"/>
      <url>/posts/767f/</url>
      
        <content type="html"><![CDATA[<h1 id="Springboot实现邮件发送"><a href="#Springboot实现邮件发送" class="headerlink" title="Springboot实现邮件发送"></a>Springboot实现邮件发送</h1><h2 id="1-项目的创建"><a href="#1-项目的创建" class="headerlink" title="1.项目的创建"></a>1.项目的创建</h2><h3 id="1-1创建一个Springboot项目"><a href="#1-1创建一个Springboot项目" class="headerlink" title="1.1创建一个Springboot项目"></a>1.1创建一个Springboot项目</h3><p>核心pom.xml的配置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--邮件服务--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-mail<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2配置邮箱服务配置文件"><a href="#1-2配置邮箱服务配置文件" class="headerlink" title="1.2配置邮箱服务配置文件"></a>1.2配置邮箱服务配置文件</h3><p>在application.yml里面配置如下</p><p>下面以QQ邮箱为例：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="comment">#    邮件服务</span></span><br><span class="line">  <span class="attr">mail:</span></span><br><span class="line">    <span class="attr">host:</span> <span class="string">smtp.qq.com</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">&lt;qq邮箱账户&gt;</span></span><br><span class="line">    <span class="attr">password:</span> <span class="string">&lt;smtp服务的授权码&gt;</span></span><br><span class="line">    <span class="comment"># 端口号465或587</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">587</span></span><br><span class="line">    <span class="comment"># 默认的邮件编码为UTF-8</span></span><br><span class="line">    <span class="attr">default-encoding:</span> <span class="string">UTF-8</span></span><br><span class="line">    <span class="comment"># 配置SSL 加密工厂</span></span><br><span class="line">    <span class="attr">properties:</span></span><br><span class="line">      <span class="attr">mail:</span></span><br><span class="line">        <span class="attr">smtp:</span></span><br><span class="line">          <span class="attr">socketFactoryClass:</span> <span class="string">javax.net.ssl.SSLSocketFactory</span></span><br><span class="line">        <span class="comment">#表示开启 DEBUG 模式，这样，邮件发送过程的日志会在控制台打印出来，方便排查错误</span></span><br><span class="line">        <span class="attr">debug:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><p><img src="https://gitee.com/kzycn/picCloud/raw/master/2021/20210130120801.png"></p><h2 id="2-核心业务代码"><a href="#2-核心业务代码" class="headerlink" title="2.核心业务代码"></a>2.核心业务代码</h2><h3 id="2-1在service层创建MailService-java"><a href="#2-1在service层创建MailService-java" class="headerlink" title="2.1在service层创建MailService.java"></a>2.1在service层创建MailService.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MailService</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> JavaMailSender mailSender;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//传入邮箱发件人</span></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;spring.mail.username&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String sender;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   <span class="comment">//发送简单邮件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendSimpleMail</span><span class="params">(String receiver,String subject,String context)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">SimpleMailMessage</span> <span class="variable">simpleMailMessage</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleMailMessage</span>();</span><br><span class="line">        simpleMailMessage.setFrom(sender);</span><br><span class="line">        simpleMailMessage.setTo(receiver);</span><br><span class="line">        simpleMailMessage.setText(context);</span><br><span class="line">        simpleMailMessage.setSubject(subject);</span><br><span class="line">        simpleMailMessage.setSentDate(<span class="keyword">new</span> <span class="title class_">Date</span>());</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            mailSender.send(simpleMailMessage);</span><br><span class="line">            System.out.println(<span class="string">&quot;简单邮件已发送&quot;</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;简单邮件发送出错&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//发送HTML邮件</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sendHtmlMail</span><span class="params">(String receiver,String subject,String context)</span>&#123;</span><br><span class="line">        <span class="type">MimeMessage</span> <span class="variable">mimeMessage</span> <span class="operator">=</span> mailSender.createMimeMessage();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">MimeMessageHelper</span> <span class="variable">mimeMessageHelper</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MimeMessageHelper</span>(mimeMessage, <span class="literal">true</span>);</span><br><span class="line">            mimeMessageHelper.setFrom(sender);</span><br><span class="line">            mimeMessageHelper.setTo(receiver);</span><br><span class="line">            mimeMessageHelper.setText(context,<span class="literal">true</span>);</span><br><span class="line">            mimeMessageHelper.setSubject(subject);</span><br><span class="line">            mailSender.send(mimeMessage);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (MessagingException e) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;简单邮件发送出错&quot;</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="2-2在controller创建mailController-java"><a href="#2-2在controller创建mailController-java" class="headerlink" title="2.2在controller创建mailController.java"></a>2.2在controller创建mailController.java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">mailController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    MailService mailService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    TemplateEngine templateEngine;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/tomail&quot;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toMail</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">title</span> <span class="operator">=</span> <span class="string">&quot;&lt;邮件标题&gt;&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">email</span> <span class="operator">=</span> <span class="string">&quot;&lt;收件人邮箱&gt;&quot;</span>;</span><br><span class="line">        <span class="type">Context</span> <span class="variable">context</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Context</span>();</span><br><span class="line"><span class="comment">//        设置传入模板的页面的参数 参数名为:id 参数随便写一个就行</span></span><br><span class="line">        context.setVariable(<span class="string">&quot;id&quot;</span>, <span class="string">&quot;000&quot;</span>);</span><br><span class="line"><span class="comment">//        emailTemplate是要发送的模板邮件</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">process</span> <span class="operator">=</span> templateEngine.process(<span class="string">&quot;emailTemplate&quot;</span>, context);</span><br><span class="line">        mailService.sendHtmlMail(email,title,process);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> Springboot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker</title>
      <link href="/posts/a01f/"/>
      <url>/posts/a01f/</url>
      
        <content type="html"><![CDATA[<h2 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h2><p><a href="https://docs.docker.com/get-docker/">Docker官方文档</a></p><h2 id="CentOS下安装"><a href="#CentOS下安装" class="headerlink" title="CentOS下安装"></a>CentOS下安装</h2><h3 id="更新yum包"><a href="#更新yum包" class="headerlink" title="更新yum包"></a>更新yum包</h3><span id="more"></span><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum update</span><br></pre></td></tr></table></figure><h3 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils device-mapper-persistent-data lvm2</span><br></pre></td></tr></table></figure><h3 id="卸载旧版本"><a href="#卸载旧版本" class="headerlink" title="卸载旧版本"></a>卸载旧版本</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">sudo yum remove docker \</span></span><br><span class="line"><span class="language-bash">                  docker-client \</span></span><br><span class="line"><span class="language-bash">                  docker-client-latest \</span></span><br><span class="line"><span class="language-bash">                  docker-common \</span></span><br><span class="line"><span class="language-bash">                  docker-latest \</span></span><br><span class="line"><span class="language-bash">                  docker-latest-logrotate \</span></span><br><span class="line"><span class="language-bash">                  docker-logrotate \</span></span><br><span class="line"><span class="language-bash">                  docker-engine</span></span><br></pre></td></tr></table></figure><h3 id="yum安装"><a href="#yum安装" class="headerlink" title="yum安装"></a>yum安装</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install -y yum-utils</span><br></pre></td></tr></table></figure><h3 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo mkdir -p /etc/docker</span><br><span class="line">sudo tee /etc/docker/daemon.json &lt;&lt;-&#x27;EOF&#x27;</span><br><span class="line">&#123;</span><br><span class="line">  &quot;registry-mirrors&quot;: [&quot;https://fimadrya.mirror.aliyuncs.com&quot;]</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">sudo systemctl daemon-reload</span><br><span class="line">sudo systemctl restart docker</span><br></pre></td></tr></table></figure><h3 id="安装docker-engine"><a href="#安装docker-engine" class="headerlink" title="安装docker engine"></a>安装docker engine</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo yum install docker-ce docker-ce-cli containerd.io</span><br></pre></td></tr></table></figure><h3 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemctl start docker</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker version #docker版本信息</span><br><span class="line">docker info #详细信息</span><br><span class="line">docker 命令 --help #万能命令</span><br></pre></td></tr></table></figure><p>docker官方参考文档：<a href="https://docs.docker.com/reference/">https://docs.docker.com/reference/</a></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><p><strong>docker images</strong>查看所有本地主机上的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[root@iZm5e1u64hvs1mdn0hhqztZ ~]# docker images</span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">hello-world         latest              bf756fb1ae65        11 months ago       13.3kB</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">解释</span></span><br><span class="line">REPOSITORY镜像的仓库源</span><br><span class="line">TAG镜像的标签</span><br><span class="line">IMAGE ID镜像的ID</span><br><span class="line">CREATED镜像的创建时间</span><br><span class="line">SIZE镜像的大小</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">可选项</span></span><br><span class="line">Options:</span><br><span class="line">  -a, --all             列出的所有的镜像</span><br><span class="line">  -q, --quiet           只显示镜像的id</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>docker search</strong>搜索镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker search 要搜索的镜像</span><br></pre></td></tr></table></figure><p><strong>docker pull</strong>下载mysql</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@iZm5e1u64hvs1mdn0hhqztZ ~]# docker pull mysql</span><br><span class="line">Using default tag: latest#如果不写tag，默认latest，最后一个版本</span><br><span class="line">latest: Pulling from library/mysql</span><br><span class="line">852e50cd189d: Pull complete #分层下载，docker images的核心 联合文件系统</span><br><span class="line">29969ddb0ffb: Pull complete </span><br><span class="line">a43f41a44c48: Pull complete </span><br><span class="line">5cdd802543a3: Pull complete </span><br><span class="line">b79b040de953: Pull complete </span><br><span class="line">938c64119969: Pull complete </span><br><span class="line">7689ec51a0d9: Pull complete </span><br><span class="line">a880ba7c411f: Pull complete </span><br><span class="line">984f656ec6ca: Pull complete </span><br><span class="line">9f497bce458a: Pull complete </span><br><span class="line">b9940f97694b: Pull complete </span><br><span class="line">2f069358dc96: Pull complete </span><br><span class="line">Digest: sha256:4bb2e81a40e9d0d59bd8e3dc2ba5e1f2197696f6de39a91e90798dd27299b093#签名</span><br><span class="line">Status: Downloaded newer image for mysql:latest</span><br><span class="line">docker.io/library/mysql:latest# 真实地址</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">指定版本下载</span></span><br><span class="line">docker pull mysql:5.7</span><br></pre></td></tr></table></figure><p><strong>docker rmi</strong>删除镜像</p><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><blockquote><p>说明：有了镜像才能创建容器</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull centos</span><br></pre></td></tr></table></figure><p><strong>新建容器并启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run [可选参数] image</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">参数说明</span></span><br><span class="line">--name=&quot;Name&quot;容器名字</span><br><span class="line">-d后台方式运行</span><br><span class="line">-it交互方式运行，进入容器查看内容</span><br><span class="line">-p指定容器端口</span><br><span class="line">-p 主机端口:容器端口（常用）</span><br><span class="line">-P随机指定端口（大写P）</span><br></pre></td></tr></table></figure><p><strong>测试</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@iZm5e1u64hvs1mdn0hhqztZ ~]# docker run -it centos</span><br><span class="line">[root@e85283b1056e /]# </span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">容器内就是一个centos系统</span></span><br></pre></td></tr></table></figure><p><strong>退出容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">exit #关闭并退出 从容器中退回主机</span><br><span class="line">Ctrl+p+q #容器不停止退出</span><br></pre></td></tr></table></figure><p><strong>列出所有的运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br><span class="line">-a #列出当前正在运行的容器+带出历史运行过的容器</span><br><span class="line">-n=? #显示最近创建的容器</span><br><span class="line">-q #只显示容器的编号</span><br></pre></td></tr></table></figure><p><strong>删除容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm 容器id</span><br></pre></td></tr></table></figure><p><strong>启动和停止容器的操作</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker start 容器id#启动容器</span><br><span class="line">docker restart 容器id#重启容器</span><br><span class="line">docker stop 容器id#停止当前正在运行的容器</span><br><span class="line">docker kill 容器id#停止当前正在运行的容器</span><br></pre></td></tr></table></figure><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><p><strong>后台启动容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">命令 docker run -d 镜名</span></span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">问题，发现centos停止了</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">常见的坑：docker容器使用后台运行，就必须要有一个前台进程，docker发现没有应用，就会停止</span></span><br></pre></td></tr></table></figure><p><strong>查看日志</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker logs --help</span><br></pre></td></tr></table></figure><p><strong>查看容器中的进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker top 容器id</span><br></pre></td></tr></table></figure><p><strong>进入当前正在运行的容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it 容器id bashShell</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 运维 </category>
          
          <category> Docker </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker安装部署 </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法之旅----二分查找</title>
      <link href="/posts/1761/"/>
      <url>/posts/1761/</url>
      
        <content type="html"><![CDATA[<h1 id="算法之旅—-二分查找"><a href="#算法之旅—-二分查找" class="headerlink" title="算法之旅—-二分查找"></a>算法之旅—-二分查找</h1><h2 id="介绍二分查找"><a href="#介绍二分查找" class="headerlink" title="介绍二分查找"></a>介绍二分查找</h2><p>二分查找是一种算法，其输入的是一个有序的元素列表。如果要查找的元素包含在列表内，二分查找就返回其位置；否则返回null</p><h3 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h3><span id="more"></span><p>随便想一个1-100的有序数组</p><p>你的目标是以最少的次数猜到这个数字，每次猜测后，会提示你小了，大了或对了。</p><p>假设你从1开始依次往上猜，这是简单查找，简单来说又叫傻找。每次猜测只能排除一个数字。</p><p>如果我给出的数字是100，你需要猜测100次，效率极低</p><h3 id="更佳的查找方式"><a href="#更佳的查找方式" class="headerlink" title="更佳的查找方式"></a>更佳的查找方式</h3><p>如果我们取中从50开始，提示大了，那将排除一半的数字。</p><p>使用二分查找时，你猜测的是中间的数字，从而每次都将余下的数字排除一半！</p><h2 id="代码（Java）"><a href="#代码（Java）" class="headerlink" title="代码（Java）"></a>代码（Java）</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BinarySearch</span> &#123;</span><br><span class="line">    <span class="comment">//一个按顺序的数组</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">int</span>[] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>&#125;;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.out.println(b(a,<span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//b方法，返回值object，传入数组和要查询的数</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">b</span><span class="params">(<span class="type">int</span>[] list,<span class="type">int</span> item)</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//low和hight是查询范围</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">low</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">hight</span> <span class="operator">=</span> a.length;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//范围没缩小到只包含一个元素就一直循环</span></span><br><span class="line">        <span class="keyword">while</span> (low&lt;=hight)&#123;</span><br><span class="line">            <span class="comment">//检查中间的元素</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">mid</span> <span class="operator">=</span> (low+hight)/<span class="number">2</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">guess</span> <span class="operator">=</span> mid;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//找到了元素</span></span><br><span class="line">            <span class="keyword">if</span> (guess==item)&#123;</span><br><span class="line">                <span class="keyword">return</span> mid;<span class="comment">//直接返回找到的元素</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//未找到元素</span></span><br><span class="line">            <span class="keyword">if</span> (guess&gt;item)&#123;</span><br><span class="line">                <span class="comment">//查询的元素大了，将元素减少1，直到找到这个元素</span></span><br><span class="line">                hight = mid -<span class="number">1</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//查询的元素小了，将元素加1，直到找到这个元素</span></span><br><span class="line">                low = mid +<span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//数组里没有要找的元素就返回none</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;none&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>淘宝npm镜像</title>
      <link href="/posts/2c7a/"/>
      <url>/posts/2c7a/</url>
      
        <content type="html"><![CDATA[<h1 id="cnpm"><a href="#cnpm" class="headerlink" title="cnpm"></a>cnpm</h1><blockquote><p>本系统运行在 <a href="mailto:&#x4e;&#111;&#100;&#101;&#46;&#x6a;&#x73;&#x40;&#x76;&#x31;&#x36;&#46;&#49;&#51;&#46;&#50;">&#x4e;&#111;&#100;&#101;&#46;&#x6a;&#x73;&#x40;&#x76;&#x31;&#x36;&#46;&#49;&#51;&#46;&#50;</a>上——2022年5月17日</p></blockquote><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npmmirror.com</span><br></pre></td></tr></table></figure><h2 id="npmmirror-中国镜像站"><a href="#npmmirror-中国镜像站" class="headerlink" title="npmmirror 中国镜像站"></a>npmmirror 中国镜像站</h2><p>📢📢 「重要通知」原淘宝 npm 域名即将停止解析 📢📢</p><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10分钟 一次以保证尽量与官方服务同步。<br>当前 npmmirror.com 运行版本是: <a href="mailto:&#99;&#110;&#x70;&#109;&#99;&#111;&#114;&#101;&#x40;&#49;&#46;&#x30;&#46;&#48;&#45;&#x72;&#x63;&#x2e;&#x31;">&#99;&#110;&#x70;&#109;&#99;&#111;&#114;&#101;&#x40;&#49;&#46;&#x30;&#46;&#48;&#45;&#x72;&#x63;&#x2e;&#x31;</a><br>本系统运行在 <a href="mailto:&#x4e;&#111;&#x64;&#x65;&#x2e;&#x6a;&#115;&#x40;&#118;&#49;&#54;&#x2e;&#x31;&#x33;&#46;&#x32;">&#x4e;&#111;&#x64;&#x65;&#x2e;&#x6a;&#115;&#x40;&#118;&#49;&#54;&#x2e;&#x31;&#x33;&#46;&#x32;</a> 上<br>开源镜像: <a href="https://npmmirror.com/mirrors/">https://npmmirror.com/mirrors/</a><br>Node.js 镜像: <a href="https://npmmirror.com/mirrors/node/">https://npmmirror.com/mirrors/node/</a><br>alinode 镜像: <a href="https://npmmirror.com/mirrors/alinode/">https://npmmirror.com/mirrors/alinode/</a><br>ChromeDriver 镜像: <a href="https://npmmirror.com/mirrors/chromedriver/">https://npmmirror.com/mirrors/chromedriver/</a><br>OperaDriver 镜像: <a href="https://npmmirror.com/mirrors/operadriver/">https://npmmirror.com/mirrors/operadriver/</a><br>Selenium 镜像: <a href="https://npmmirror.com/mirrors/selenium/">https://npmmirror.com/mirrors/selenium/</a><br>electron 镜像: <a href="https://npmmirror.com/mirrors/electron/">https://npmmirror.com/mirrors/electron/</a></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
          <category> npm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> npm镜像 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL数据库的安装（手动版本）</title>
      <link href="/posts/3d63/"/>
      <url>/posts/3d63/</url>
      
        <content type="html"><![CDATA[<p><span color="red">警告：您可以在本博客 数据库 MySQL 分类下找到简单的安装包安装版本，更适合小白，此篇文章适合喜好折腾的大佬<span></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><ol><li>百度MySQL</li><li><a href="https://dev.mysql.com/downloads/mysql/">社区版MySQL安装地址</a></li></ol><h2 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h2><ol><li>将下载好的MySQL数据库压缩文件，解压到任意磁盘分区内。</li><li>跟Java一样在MySQL使用之前要配置系统环境变量<span id="more"></span><img src="https://cos.blog.fsyume.com/blog-pic/202205261344883.png"></li></ol><p>下载完后，我们将 zip 包解压到相应的目录，这里我将解压后的文件夹放在 <code> C:\MySQL</code> 下。</p><p>接下来我们需要配置下 MySQL 的配置文件</p><p>打开刚刚解压的文件夹<code> C:\MySQL</code> ，在该文件夹下创建 <code>my.ini</code> 配置文件，编辑 <code>my.ini </code>配置以下基本信息：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line"># 设置mysql客户端默认字符集</span><br><span class="line">default-character-set=utf8</span><br><span class="line"> </span><br><span class="line">[mysqld]</span><br><span class="line"># 设置3306端口</span><br><span class="line">port = 3306</span><br><span class="line"># 设置mysql的安装目录</span><br><span class="line">basedir=C:\\web\\mysql-8.0.11</span><br><span class="line"># 设置 mysql数据库的数据的存放目录，MySQL 8+ 不需要以下配置，系统自己生成即可，否则有可能报错</span><br><span class="line"># datadir=C:\\web\\sqldata</span><br><span class="line"># 允许最大连接数</span><br><span class="line">max_connections=20</span><br><span class="line"># 服务端使用的字符集默认为8比特编码的latin1字符集</span><br><span class="line">character-set-server=utf8</span><br><span class="line"># 创建新表时将使用的默认存储引擎</span><br><span class="line">default-storage-engine=INNODB</span><br></pre></td></tr></table></figure><p>接下来我们来启动下 MySQL 数据库：</p><p>以&#x3D;&#x3D;管理员&#x3D;&#x3D;身份打开 cmd 命令行工具，切换目录：</p><p><code>cd C:\MySQL\bin</code></p><p>初始化数据库：</p><p><code>mysqld --initialize --console</code></p><p>执行完成后，会输出 root 用户的初始默认密码，如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">2018-04-20T02:35:05.464644Z 5 [Note] [MY-010454] [Server] A temporary password is generated for root@localhost: APWCY5ws&amp;hjQ</span><br></pre></td></tr></table></figure><p><code>APWCY5ws&amp;hjQ </code>就是初始密码，后续登录需要用到，你也可以在登陆后修改密码。</p><p>输入以下安装命令：</p><p><code>mysqld install</code></p><p>启动输入以下命令即可：</p><p><code>net start mysql</code></p><h2 id="登录-MySQL"><a href="#登录-MySQL" class="headerlink" title="登录 MySQL"></a>登录 MySQL</h2><p>当 MySQL 服务已经运行时, 我们可以通过 MySQL 自带的客户端工具登录到 MySQL 数据库中, 首先打开命令提示符, 输入以下格式的命名:</p><p><code>mysql -h 主机名 -u 用户名 -p</code></p><p>参数说明：</p><ul><li>h : 指定客户端所要登录的 MySQL 主机名, 登录本机(localhost 或 127.0.0.1)该参数可以省略;</li><li>u : 登录的用户名;</li><li>p : 告诉服务器将会使用一个密码来登录, 如果所要登录的用户名密码为空, 可以忽略此选项。<br>如果我们要登录本机的 MySQL 数据库，只需要输入以下命令即可：</li></ul><p><code>mysql -u root -p</code></p><p>按回车确认, 如果安装正确且 MySQL 正在运行, 会得到以下响应:</p><p><code>Enter password:</code></p><p>若密码存在, 输入密码登录, 不存在则直接按回车登录。登录成功后你将会看到 <code>Welcome to the MySQL monitor...</code> 的提示语。</p><p>然后命令提示符会一直以<code>mysq&gt;</code>加一个闪烁的光标等待命令的输入, 输入<code>exit</code>或<code> quit</code> 退出登录。</p><h2 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">user</span> <span class="string">&#x27;root&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;newpassword&#x27;</span>;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 数据库安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>maven配置</title>
      <link href="/posts/f520/"/>
      <url>/posts/f520/</url>
      
        <content type="html"><![CDATA[<h2 id="maven下载"><a href="#maven下载" class="headerlink" title="maven下载"></a>maven下载</h2><p><a href="https://maven.apache.org/download.cgi">maven下载地址</a></p><p>下载后解压，在文件夹内创建新文件夹，<code>maven-repo</code>，作为maven仓库</p><span id="more"></span><p><img src="https://cos.blog.fsyume.com/blog-pic/202205261335107.png"></p><p>找到<code>setting.xml</code>文件，用VS code或者notepad++打开</p><p><img src="https://cos.blog.fsyume.com/blog-pic/202205261336485.png"></p><p>添加仓库绝对地址</p><p><img src="https://cos.blog.fsyume.com/blog-pic/202205261336261.png"></p><p>由于maven仓库在国外，所有我们需要设置<strong>国内镜像</strong></p><blockquote><p>阿里云Maven镜像仓库地址：<a href="https://developer.aliyun.com/mvn/guide">https://developer.aliyun.com/mvn/guide</a></p></blockquote><p><img src="https://cos.blog.fsyume.com/blog-pic/202205261337469.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">id</span>&gt;</span>aliyunmaven<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>*<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">name</span>&gt;</span>阿里云公共仓库<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">url</span>&gt;</span>https://maven.aliyun.com/repository/public<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure><p>就此maven配置完毕</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MVC三层架构</title>
      <link href="/posts/7676/"/>
      <url>/posts/7676/</url>
      
        <content type="html"><![CDATA[<blockquote><ul><li>model模型<ul><li>数据库访问dao</li><li>业务逻辑处理service    领域对象模型</li></ul></li><li>view视图（JSP）<ul><li>展示数据</li><li>提供可以供我们操作的请求</li></ul></li><li>controller控制器（请求转发 servlet）<ul><li>接受用户的请求</li><li>响应给客户端内容</li><li>重定向或者转发</li></ul></li></ul></blockquote><h2 id="为什么使用MVC开发模式"><a href="#为什么使用MVC开发模式" class="headerlink" title="为什么使用MVC开发模式"></a>为什么使用MVC开发模式</h2>  <span id="more"></span><p>  传统JSP开发网页的缺点：<strong>耦合度高</strong></p><p>  MVC开发模式解决了耦合度高的问题</p><h2 id="什么是MVC开发模式"><a href="#什么是MVC开发模式" class="headerlink" title="什么是MVC开发模式"></a>什么是MVC开发模式</h2><p>  M代表Model（模型）</p><p>  指对象，数据库等（最底层）</p><p>  V代表View（视图）</p><p>  指视图，网页或应用上的给用户看的东西</p><p>  C代表Controller（控制器）</p><p>  分离View和Model，分别控制model和view进行业务操作</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring框架</title>
      <link href="/posts/6214/"/>
      <url>/posts/6214/</url>
      
        <content type="html"><![CDATA[<h1 id="Spring框架"><a href="#Spring框架" class="headerlink" title="Spring框架"></a>Spring框架</h1><h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Spring是轻量级开源的JavaEE框架，解决企业应用开发的复杂性，核心有两个部分：<strong>IOC和AOP</strong></p><p><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/index.html">Spring官方文档</a></p><h3 id="IOC和AOP介绍"><a href="#IOC和AOP介绍" class="headerlink" title="IOC和AOP介绍"></a>IOC和AOP介绍</h3><ol><li>IOC：控制反转，把创建对象过程交给Spring进行管理</li><li>AOP：面向切面，不修改源代码进行功能增强</li></ol><h3 id="Spring特点"><a href="#Spring特点" class="headerlink" title="Spring特点"></a>Spring特点</h3><span id="more"></span><ol><li>方便解耦，简化开发</li><li>Aop编程的支持</li><li>方便程序测试</li><li>方便集成其他框架</li><li>方便进行事务管理</li><li>降低API开发难度</li></ol><h3 id="SSH-amp-SSM"><a href="#SSH-amp-SSM" class="headerlink" title="SSH&amp;SSM"></a>SSH&amp;SSM</h3><ul><li><strong>SSH : Struct2 + Spring + Hibernate</strong></li><li><strong>SSM: SpringMVC + Spring + Mybatis</strong></li></ul><hr><p><a href="https://spring.io/">Spring官网地址</a></p><p><img src="https://cos.blog.fsyume.com/blog-pic/202205261329104.png" alt="Spring官网"></p><p><strong>Maven配置：</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.3.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>通过maven直接导入</strong>（都学到Spring了不会还不知道maven吧~）</p><h2 id="控制反转（IOC）"><a href="#控制反转（IOC）" class="headerlink" title="控制反转（IOC）"></a>控制反转（IOC）</h2><p><code>IOC</code> 是 <code>Inverse of Control</code> 的缩写,意思是控制反转. 是降低对象之间耦合关系的设计思想.</p><p>通过 IOC ,开发人员不需要关心对象的创建过程,该过程交给Spring IOC<strong>容器</strong>完成.Spring IOC<strong>容器</strong>通过<strong>反</strong> </p><p><strong>射</strong>机制创建类的实例.</p><blockquote><p>将对象的创建交给Spring容器管理,转移控制权</p></blockquote><h2 id="依赖注入（DI）"><a href="#依赖注入（DI）" class="headerlink" title="依赖注入（DI）"></a>依赖注入（DI）</h2><p><code>DI</code> 是 <code>Dependency Injection</code> 的缩写,意思是 Spring IOC 容器 创建对象的时候,同时为这个对象</p><p><strong>注入</strong>它所<strong>依赖</strong>的属性的值. 这个对象与对象之间的关系也交给了 Spring IOC 容器 来维护.</p><blockquote><p>将对象与对象之间的关系交给Spring IOC容器维护,转移控制权</p></blockquote><p>总结:</p><p>依赖注入是 Spring IOC 容器在运行期间, 动态的将依赖关系注入到对象中.</p><p>所以依赖注入是控制反转的实现方式.</p><p>依赖注入和控制反转描述是从不同角度描述的同一件事情, 就是通过引入Spring IOC容器,利用依赖关系注</p><p>入的方式, <strong>实现对象与对象之间的解耦</strong>.(高内聚,低耦合) </p><p><img src="https://cos.blog.fsyume.com/blog-pic/202205261331447.png"></p><h2 id="面向切面编程（AOP）"><a href="#面向切面编程（AOP）" class="headerlink" title="面向切面编程（AOP）"></a>面向切面编程（AOP）</h2><p>Spring 框架的一个关键组件是面向切面的程序设计（AOP）框架。</p><p>一个程序中跨越多个点的功能被称为横切关注点，这些横切关注点在概念上独立于应用程序的业务逻</p><p>辑。有各种各样常见的很好的关于方面的例子，比如<strong>日志记录、声明性事务、安全性，和缓存</strong>等等。</p><p>(Filter) </p><p>Spring 框架的 AOP 模块提供了面向切面的程序设计实现，允许你定义拦截器方法和切入点，<strong>可以实现</strong></p><p><strong>将应该被分开的代码干净的分开的功能</strong>。</p><h2 id="核心容器"><a href="#核心容器" class="headerlink" title="核心容器"></a>核心容器</h2><p><code>spring-context</code> 模块构架于核心模块之上， 它扩展了 <code>BeanFactory</code>， 为它添加了 <code>Bean</code> 生命周</p><p>期控制、 框架事件体系以及资源加载透明化等功能·。 此外该模块还提供了许多企业级支持， 如邮</p><p>件访问、远程访问、 任务调度等。</p><p><code>ApplicationContext</code> 是该模块的<strong>核心接口</strong>，它是 <code>BeanFactory</code> 的超类， 与<code>BeanFactory</code> 不同，</p><p><code>ApplicationContext</code> 容器实例化后会自动对所有的单实例 Bean 进行实例化与依赖关系的装</p><p>配， 使之处于待用状态。 </p><p><code>ApplicationContext</code> 接口的常用子类: </p><p><code>FileSystemXmlApplicationContext</code> 从磁盘绝对路径加载配置文件初始化IOC容器</p><p><code>ClassPathXmlApplicationContext</code> 从类路径加载配置文件初始化IOC容器</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello World"></a>Hello World</h2><h3 id="1-创建maven工程"><a href="#1-创建maven工程" class="headerlink" title="1.创建maven工程"></a>1.创建maven工程</h3><p><img src="https://cos.blog.fsyume.com/blog-pic/202205261332927.png"></p><h3 id="2-项目依赖"><a href="#2-项目依赖" class="headerlink" title="2.项目依赖"></a>2.项目依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--spring模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.2.8.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--junit测试模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--日志模块--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.logging.log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.12.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="3-配置文件"><a href="#3-配置文件" class="headerlink" title="3.配置文件"></a>3.配置文件</h3><p><img src="https://gitee.com/kzycn/picCloud/raw/master/2020/image-20200927070220653.png"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans</span></span></span><br><span class="line"><span class="string"><span class="tag">       http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="日志配置文件"><a href="#日志配置文件" class="headerlink" title="日志配置文件"></a>日志配置文件</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--先定义所有的appender--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appenders</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--输出控制台的配置--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">console</span> <span class="attr">name</span>=<span class="string">&quot;Console&quot;</span> <span class="attr">target</span>=<span class="string">&quot;SYSTEM_OUT&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--输出日志的格式--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">patternlayout</span> <span class="attr">pattern</span>=<span class="string">&quot;%d&#123;yyyy-MM-dd HH:mm:ss&#125; [%p] %c %m %n&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">console</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appenders</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 然后定义logger，只有定义了logger并引入的appender，appender才会生效--&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 日志级别以及优先级排序: OFF &gt; FATAL &gt; ERROR &gt; WARN &gt; INFO &gt; DEBUG &gt; TRACE &gt; ALL --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">loggers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--org.springframework &lt;logger name=&quot;org.springframework&quot; level=&quot;INFO&quot;/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;DEBUG&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--输出到控制台--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;Console&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">loggers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="配置JavaBean"><a href="#配置JavaBean" class="headerlink" title="配置JavaBean"></a>配置JavaBean</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">javabean</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String massage;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getMassage</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> massage;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setMassage</span><span class="params">(String massage)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.massage = massage;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="装配JavaBean"><a href="#装配JavaBean" class="headerlink" title="装配JavaBean"></a>装配JavaBean</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 配置baen</span></span><br><span class="line"><span class="comment">    &lt;bean&gt; 配置需要让Spring IOC容器创建的对象 name ：</span></span><br><span class="line"><span class="comment">    用于之后从spring容器获得实例时使用 class ：</span></span><br><span class="line"><span class="comment">    需要创建实例的全限定类名</span></span><br><span class="line"><span class="comment">    property:类中的成员</span></span><br><span class="line"><span class="comment">    property name 成员的名称</span></span><br><span class="line"><span class="comment">    property value 成员的值</span></span><br><span class="line"><span class="comment">    scope:singleton 单例</span></span><br><span class="line"><span class="comment">    prototype 多例</span></span><br><span class="line"><span class="comment">    lazy-init: true</span></span><br><span class="line"><span class="comment">    按需创建对象 false</span></span><br><span class="line"><span class="comment">    容器启动就创建对象</span></span><br><span class="line"><span class="comment">    scope=&quot;singleton&quot;时有效</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;javabean&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">class</span>=<span class="string">&quot;cn.husei.spring.server.javabean&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">scope</span>=<span class="string">&quot;singleton&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">lazy-init</span>=<span class="string">&quot;true&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">init-method</span>=<span class="string">&quot;init&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">destroy-method</span>=<span class="string">&quot;destroy&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;massage&quot;</span> <span class="attr">value</span>=<span class="string">&quot;hello spring&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="单元测试"><a href="#单元测试" class="headerlink" title="单元测试"></a>单元测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test01</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">//原来的执行过程（没有用Spring）</span></span><br><span class="line">        <span class="type">javabean</span> <span class="variable">javabean</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">javabean</span>();</span><br><span class="line">        javabean.setMassage(<span class="string">&quot;hello spring&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span>  javabean.getMassage();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息内容：&quot;</span>+msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test02</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//用spring之后</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.读取spring-config.xml文件，完成容器的初始化</span></span><br><span class="line">        <span class="type">ApplicationContext</span> <span class="variable">applicationContext</span></span><br><span class="line">                <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassPathXmlApplicationContext</span>(<span class="string">&quot;spring-config.xml&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.从容器中获取对象</span></span><br><span class="line">        <span class="type">javabean</span> <span class="variable">bean</span> <span class="operator">=</span> applicationContext.getBean(javabean.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.使用对象</span></span><br><span class="line">        bean.setMassage(<span class="string">&quot;hello spring&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> bean.getMassage();</span><br><span class="line">        System.out.println(<span class="string">&quot;消息内容：&quot;</span>+msg);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h3><h4 id="方式一"><a href="#方式一" class="headerlink" title="方式一"></a>方式一</h4><p>使用构造方法中参数的索引(常用)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imcode.spring.service.MessageService&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">&quot;0&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello Spring&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="方式二"><a href="#方式二" class="headerlink" title="方式二"></a>方式二</h4><p>使用构造方法中参数的名称(常用)</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imcode.spring.service.MessageService&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello Spring&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>方式三</strong></p><p>使用构造方法中参数的类型(不常用) </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;messageService&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.imcode.spring.service.MessageService&quot;</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">type</span>=<span class="string">&quot;java.lang.String&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Hello Spring&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="启动注解"><a href="#启动注解" class="headerlink" title="启动注解"></a>启动注解</h2><h3 id="XML文件启动注解扫描"><a href="#XML文件启动注解扫描" class="headerlink" title="XML文件启动注解扫描"></a>XML文件启动注解扫描</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> <span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xmlns:context</span>=<span class="string">&quot;http://www.springframework.org/schema/context&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring- beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring- context.xsd&quot;</span>&gt;</span> </span><br><span class="line">    <span class="comment">&lt;!-- 启动注解扫描 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">&quot;com.imcode.spring.service&quot;</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="控制反转IOC"><a href="#控制反转IOC" class="headerlink" title="控制反转IOC"></a>控制反转IOC</h3><p><code>@Component</code></p><ul><li><p><code>@Component</code>等价于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li><li><p><code>@Component(&quot;name&quot;)</code>等价于</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">name</span>=<span class="string">&quot;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="衍生注解"><a href="#衍生注解" class="headerlink" title="衍生注解"></a>衍生注解</h3><p>提供3个 <code>@Component</code> 注解衍生注解（功能一样）,分别用于数据访问层,服务层和控制层</p><ul><li><code>@Repository</code><ul><li>数据访问层</li></ul></li><li><code>@Service</code><ul><li>服务层</li></ul></li><li><code>@Controller</code><ul><li>控制层</li></ul></li></ul><h3 id="依赖注入DI"><a href="#依赖注入DI" class="headerlink" title="依赖注入DI"></a>依赖注入DI</h3><p><strong>注入简单数据</strong> </p><p><code>@Value</code></p><p>注入简单数据类型： <code>@Value(&quot;$&#123;&#125;&quot;)</code></p><p><strong>注入对象</strong> </p><p><code>@Autowired</code> </p><p><code>@Qualifier(&quot;name&quot;)</code> </p><blockquote><p>@Autowired 如果注入的是具体类，不会有问题</p><p>@Autowired 如果注入的是接口，该接口只有一个实现类，不会有问题</p><p>@Autowired 如果注入的是接口，该接口有一个以上的实现类，会有问题，IOC容器不知道应该注</p><p>入哪个实 现类了</p><p>使用</p><p>@Autowired + @Qualifier(“名称”) 组合使用两个注解解决</p></blockquote><p><code>@Resource</code> </p><p><code>@Resource(name = &quot;bean的名称&quot;)</code></p><p>该注解是JDK提供的注解</p><p><code>@Resource(&quot;name&quot;) == @Autowired + @Qualifier(&quot;name&quot;)</code> </p><p><code>@Resource == @Autowired</code> </p><h2 id="面向切面编程AOP"><a href="#面向切面编程AOP" class="headerlink" title="面向切面编程AOP"></a>面向切面编程AOP</h2><h3 id="AOP-简介"><a href="#AOP-简介" class="headerlink" title="AOP 简介"></a>AOP <strong>简介</strong></h3><p><code>AOP</code> 是 <code>Aspect Oriented Programming</code> 的缩写，意为：<strong>面向切面编程</strong>，通过预编译方式和<strong>运</strong></p><p><strong>行期动态代理</strong>实现程序功能的统一维护的一种技术。</p><p><code>AOP</code> 是 <code>OOP</code> （面向对象编程）的补充，是软件开发中的一个热点，也是Spring框架中的一个重</p><p>要内容。</p><p>利用 <code>AOP</code> 可以对业务逻辑的各个部分进行隔离，从而使得业务逻辑各部分之间的耦合度降低，提</p><p>高程序的可重用性，同时提高了开发的效率。</p><p>经典应用：<strong>事务管理、性能监视、安全检查、缓存、日志</strong>等</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>通过Python和BilibiliAPI来获取B站账户UID和粉丝数</title>
      <link href="/posts/405f/"/>
      <url>/posts/405f/</url>
      
        <content type="html"><![CDATA[<h3 id="需要工具："><a href="#需要工具：" class="headerlink" title="需要工具："></a>需要工具：</h3><ul><li>Python的requests库</li><li><a href="https://www.bilibili.com/read/cv3430609?from=search">Bilibili用户信息API（点我进入bilibiliAPI合集）</a></li></ul><blockquote><p>Bilibili用户API</p></blockquote><p><img src="https://gitee.com/kzycn/picCloud/raw/master/2020/20200910135717.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bili_api = <span class="string">&#x27;https://api.bilibili.com/x/relation/stat?vmid=115505904&#x27;</span></span><br></pre></td></tr></table></figure><p>通过requests库的get方法来请求API来获取json数据</p><p><img src="https://gitee.com/kzycn/picCloud/raw/master/2020/20200910140603.png"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># json,get请求模块</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">jsonget</span>():</span><br><span class="line">    http_data = requests.get(url=bili_api).json()</span><br><span class="line">    data = http_data[<span class="string">&quot;data&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> data</span><br></pre></td></tr></table></figure><p>获取data数组，返回data</p><p>data里面的following是粉丝数据</p><p>将follower数据传给fans，返回fans，得到粉丝数</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取粉丝数模块</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_fans</span>():</span><br><span class="line">    fans = jsonget()[<span class="string">&quot;follower&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> fans</span><br></pre></td></tr></table></figure><p>同理，也能获得用户UID</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 获取用户UID</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_uid</span>():</span><br><span class="line">    bili_uid = jsonget()[<span class="string">&quot;mid&quot;</span>]</span><br><span class="line">    <span class="keyword">return</span> bili_uid</span><br></pre></td></tr></table></figure><p>将两个模块放到主模块</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;目前粉丝数:&#x27;</span>, get_fans())</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;用户uid:&#x27;</span>, get_uid())</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 小程序 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
